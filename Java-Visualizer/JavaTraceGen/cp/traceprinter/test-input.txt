{
"usercode": 
"import java.io.FileWriter; \n import java.io.FileReader; \n import java.io.BufferedWriter; \n import java.io.BufferedReader; \n import java.io.File; \n import java.io.FileOutputStream; \n import java.io.IOException; \n import java.io.OutputStreamWriter; \n import java.io.Writer; \n import java.io.PrintWriter; \n class Link { \n private Object e; \n private Link n; \n Link(Object ine, Link inn) { e = ine; n = inn; } \n Link(Link inn) { e = null; n = inn; } \n public Object element() { return e; } \n public void setelement(Object ine) { e = ine; } \n public Link next() { return n; } \n public void setnext(Link inn) { n = inn; } \n } \n public class studentreassgnpntrPROG { \n public static void main(String [ ] args) { \n boolean SUCCESS = false; \n Link studentHead; \n studentHead = reAssignPointer(); \n Link Mp = createList(1,2,3); \n Link Mr = Mp.next().next(); \n Mp = Mp.next(); \n if (Mp.element() == studentHead.element()) SUCCESS = true; \n try{ \n PrintWriter output = new PrintWriter(\"output\", \"UTF-8\"); \n if (SUCCESS == true) { \n if( checkIfLinksLinked(studentHead) == true) { \n output.println(\"Well Done!\"); \n output.close(); \n } \n else { \n output.println(\"Try Again! You have disconnected a link. Please review the link connections.\"); \n output.close(); \n } \n } \n else { \n output.println(\"Try Again! You have incorrectly reassigned the variable p.\"); \n output.close(); \n } \n } \n catch (IOException e) { \n e.printStackTrace(); \n } \n } \n public static Link createList(int one, int two, int three) { \n Link tail = new Link(three,null); \n Link next = new Link(two,tail); \n Link head = new Link(one,next); \n return head; \n } \n public static void endTraceNow(){ \n //End the trace \n // This function's only purpose is to act as a flag to end the trace \n // for the Java - Visualization \n } \n public static void startTraceNow(){ \n //start the trace \n // This function's only purpose is to act as a flag to start the trace \n // for the Java - Visualization \n } \n public static boolean checkIfLinksLinked(Link head){ \n Object two = 2; \n Object three = 3; \n boolean linkFlag = false; \n if(head.element() == two) { \n if(head.next().element() == three) { \n linkFlag = true; \n } \n else { \n linkFlag = false; \n } \n } \n else { \n linkFlag = false; \n } \n return linkFlag; \n } \n public static Link reAssignPointer() { \n startTraceNow(); \n Link p = createList(1,2,3); \n Link r = p.next().next(); \n p = p.next(); \n endTraceNow(); \n return p; \n } \n }",
"options": {"disableNesting":true},
"args": [],
"stdin": ""
}
